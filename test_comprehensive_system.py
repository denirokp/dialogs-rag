#!/usr/bin/env python3
"""
üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–û–ú–ü–õ–ï–ö–°–ù–û–ô –°–ò–°–¢–ï–ú–´ DoD
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""

import asyncio
import json
import logging
import sys
from pathlib import Path
from typing import Dict, List, Any
import pandas as pd
import numpy as np

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(str(Path(__file__).parent))

from comprehensive_dod_pipeline import ComprehensiveDoDPipeline, load_dialogs_from_file

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def create_test_dialogs() -> List[Dict[str, Any]]:
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤"""
    test_dialogs = [
        {
            "dialog_id": 1,
            "turns": [
                {"role": "client", "text": "–£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π, –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—ã–±–æ—Ä–æ—á–Ω–æ. –ó–∞–∫–∞–∑ –Ω–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç —É–∂–µ –Ω–µ–¥–µ–ª—é."},
                {"role": "operator", "text": "–ü–æ–Ω–∏–º–∞—é –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É. –î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è."},
                {"role": "client", "text": "–≠—Ç–æ –æ—á–µ–Ω—å –¥–æ—Ä–æ–≥–æ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤. –ú–æ–∂–µ—Ç–µ –¥–∞—Ç—å —Å–∫–∏–¥–∫—É?"}
            ]
        },
        {
            "dialog_id": 2,
            "turns": [
                {"role": "client", "text": "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ –ø–æ–Ω—è—Ç–µ–Ω, –±–∞–≥ –≤ —Å–∏—Å—Ç–µ–º–µ. –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é."},
                {"role": "operator", "text": "–ü–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º."},
                {"role": "client", "text": "–°–ø–∞—Å–∏–±–æ, –æ—Ç–ª–∏—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ—Å–ª–µ –≤–∞—à–µ–π –ø–æ–º–æ—â–∏!"}
            ]
        },
        {
            "dialog_id": 3,
            "turns": [
                {"role": "client", "text": "–û–±—Ä–∞—â–∞–ª—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –Ω–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ. –î–æ–ª–≥–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞."},
                {"role": "operator", "text": "–ò–∑–≤–∏–Ω–∏—Ç–µ –∑–∞ –Ω–µ—É–¥–æ–±—Å—Ç–≤–∞. –†–∞—Å—Å–º–æ—Ç—Ä–∏–º –≤–∞—à —Å–ª—É—á–∞–π."},
                {"role": "client", "text": "–°–ª–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å —Ç–æ–≤–∞—Ä, –∑–∞–¥–µ—Ä–∂–∫–∏ –≤—ã–ø–ª–∞—Ç. –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é –¥—Ä—É–≥–æ–≥–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞."}
            ]
        },
        {
            "dialog_id": 4,
            "turns": [
                {"role": "client", "text": "–†–µ–¥–∫–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ, –Ω–µ—Ç —Å–ø—Ä–æ—Å–∞ –Ω–∞ —Ç–æ–≤–∞—Ä."},
                {"role": "operator", "text": "–ü–æ–Ω—è–ª, —É—á—Ç–µ–º –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ."},
                {"role": "client", "text": "–ò–¥–µ—è: –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ç–∞–∫–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥."}
            ]
        },
        {
            "dialog_id": 5,
            "turns": [
                {"role": "client", "text": "–ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —Å–ª–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –æ–ø—Ü–∏—é. –î–æ–ª–≥–æ –≤ –ø—É—Ç–∏ –∑–∞–∫–∞–∑."},
                {"role": "operator", "text": "–ü–æ–º–æ–≥—É –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–¥ –≤–∞—Å."},
                {"role": "client", "text": "–ù–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞, —Ö–æ—Ç–µ–ª–æ—Å—å –±—ã –∑–Ω–∞—Ç—å –≥–¥–µ –æ–Ω —Å–µ–π—á–∞—Å."}
            ]
        }
    ]
    return test_dialogs

async def test_system_components():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
    logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏
    test_dialogs = create_test_dialogs()
    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(test_dialogs)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_config = {
        "openai_api_key": "test-key",
        "processing": {
            "enable_validation": True,
            "enable_dedup": True,
            "enable_clustering": True,
            "enable_quality_checks": True,
            "enable_autocorrection": True,
            "enable_adaptive_prompts": True,
            "enable_continuous_learning": True,
            "enable_monitoring": True,
            "enable_scaling": True,
            "max_dialogs_per_batch": 100,
            "quality_threshold": 0.6
        },
        "dedup": {"threshold": 0.92, "enable_embeddings": False},
        "clustering": {"min_cluster_size": 2, "n_neighbors": 3, "min_dist": 0.1},
        "redis_host": "localhost", "redis_port": 6379, "redis_db": 0
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open('test_config_comprehensive.json', 'w', encoding='utf-8') as f:
        json.dump(test_config, f, ensure_ascii=False, indent=2)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–π–ø–ª–∞–π–Ω
    pipeline = ComprehensiveDoDPipeline('test_config_comprehensive.json')
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∏–∞–ª–æ–≥–æ–≤
    logger.info("üîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∏–∞–ª–æ–≥–æ–≤...")
    results = await pipeline.process_dialogs(test_dialogs)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    assert "dialog_results" in results, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–∏–∞–ª–æ–≥–æ–≤"
    assert "all_mentions" in results, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —É–ø–æ–º–∏–Ω–∞–Ω–∏—è"
    assert "clusters" in results, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª–∞—Å—Ç–µ—Ä—ã"
    assert "summaries" in results, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å–≤–æ–¥–∫–∏"
    assert "quality_results" in results, "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞"
    assert "statistics" in results, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
    
    logger.info("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
    mentions = results["all_mentions"]
    assert len(mentions) > 0, "–ù–µ –∏–∑–≤–ª–µ—á–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
    for mention in mentions:
        required_fields = ["dialog_id", "turn_id", "theme", "subtheme", "label_type", "text_quote", "confidence"]
        for field in required_fields:
            assert field in mention, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ {field} –≤ —É–ø–æ–º–∏–Ω–∞–Ω–∏–∏"
    
    logger.info(f"‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–æ {len(mentions)} —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
    quality_results = results["quality_results"]
    if quality_results:
        dod_status = quality_results.get("dod_status", {})
        logger.info(f"üìä DoD —Å—Ç–∞—Ç—É—Å: {dod_status}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
        client_mentions = [m for m in mentions if m.get("dialog_id") is not None]
        assert len(client_mentions) == len(mentions), "–ï—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ü–∏—Ç–∞—Ç—ã –Ω–µ –ø—É—Å—Ç—ã–µ
        empty_quotes = [m for m in mentions if not m.get("text_quote", "").strip()]
        assert len(empty_quotes) == 0, f"–ù–∞–π–¥–µ–Ω—ã –ø—É—Å—Ç—ã–µ —Ü–∏—Ç–∞—Ç—ã: {len(empty_quotes)}"
        
        logger.info("‚úÖ DoD —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = results["statistics"]
    assert stats["total_dialogs"] == len(test_dialogs), "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∏–∞–ª–æ–≥–æ–≤ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"
    assert stats["total_mentions"] == len(mentions), "–ù–µ–≤–µ—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"
    assert stats["success_rate"] > 0, "–ù—É–ª–µ–≤–∞—è —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏"
    
    logger.info(f"‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: {stats['success_rate']:.1%} —É—Å–ø–µ—à–Ω–æ—Å—Ç—å")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ A/B —Ç–µ—Å—Ç–æ–≤
    ab_results = stats.get("ab_test_results", {})
    if ab_results:
        logger.info(f"‚úÖ A/B —Ç–µ—Å—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç: {len(ab_results.get('variants', {}))} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—É—á–µ–Ω–∏—è
    learning_examples = stats.get("learning_examples_added", 0)
    logger.info(f"‚úÖ –û–±—É—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: –¥–æ–±–∞–≤–ª–µ–Ω–æ {learning_examples} –ø—Ä–∏–º–µ—Ä–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    monitoring_stats = stats.get("monitoring_stats", {})
    if monitoring_stats:
        logger.info(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç: {monitoring_stats}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    pipeline.save_results("test_results_comprehensive")
    
    logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    return results

def test_file_loading():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤"""
    logger.info("üìÇ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —Ñ–∞–π–ª–æ–≤...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π Excel —Ñ–∞–π–ª
    test_data = {
        '–¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏': [
            "–£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π, –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—ã–±–æ—Ä–æ—á–Ω–æ.",
            "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–µ –ø–æ–Ω—è—Ç–µ–Ω, –±–∞–≥ –≤ —Å–∏—Å—Ç–µ–º–µ.",
            "–û–±—Ä–∞—â–∞–ª—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, –Ω–æ –Ω–µ –ø–æ–º–æ–≥–ª–æ.",
            "–†–µ–¥–∫–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–µ, –Ω–µ—Ç —Å–ø—Ä–æ—Å–∞.",
            "–ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å, —Å–ª–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –æ–ø—Ü–∏—é."
        ]
    }
    
    df = pd.DataFrame(test_data)
    df.to_excel('test_dialogs.xlsx', index=False)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    dialogs = load_dialogs_from_file('test_dialogs.xlsx')
    assert len(dialogs) == 5, f"–û–∂–∏–¥–∞–ª–æ—Å—å 5 –¥–∏–∞–ª–æ–≥–æ–≤, –ø–æ–ª—É—á–µ–Ω–æ {len(dialogs)}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    for dialog in dialogs:
        assert "dialog_id" in dialog, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç dialog_id"
        assert "turns" in dialog, "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç turns"
        assert len(dialog["turns"]) > 0, "–ü—É—Å—Ç—ã–µ turns"
        assert dialog["turns"][0]["role"] == "client", "–ü–µ—Ä–≤—ã–π turn –Ω–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞"
    
    logger.info("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –û—á–∏—Å—Ç–∫–∞
    Path('test_dialogs.xlsx').unlink(missing_ok=True)

def test_validation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏"""
    logger.info("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é...")
    
    # –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    valid_mention = {
        "dialog_id": 1,
        "turn_id": 0,
        "theme": "–¥–æ—Å—Ç–∞–≤–∫–∞",
        "subtheme": "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—ã–±–æ—Ä–æ—á–Ω–æ",
        "label_type": "–±–∞—Ä—å–µ—Ä",
        "text_quote": "–£ –º–µ–Ω—è –ø—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π",
        "delivery_type": "complaint",
        "cause_hint": "–ø—Ä–∏—á–∏–Ω–∞ —É–∫–∞–∑–∞–Ω–∞",
        "confidence": 0.95
    }
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    invalid_mention = {
        "dialog_id": 1,
        "turn_id": 0,
        "theme": "–¥–æ—Å—Ç–∞–≤–∫–∞",
        "subtheme": "–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—ã–±–æ—Ä–æ—á–Ω–æ",
        "label_type": "–±–∞—Ä—å–µ—Ä",
        "text_quote": "",  # –ü—É—Å—Ç–∞—è —Ü–∏—Ç–∞—Ç–∞
        "confidence": 0.95
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
    pipeline = ComprehensiveDoDPipeline()
    
    try:
        pipeline._validate_mentions([valid_mention])
        logger.info("‚úÖ –í–∞–ª–∏–¥–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤–∞–ª–∏–¥–Ω–æ–≥–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
        raise
    
    try:
        pipeline._validate_mentions([invalid_mention])
        logger.error("‚ùå –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É")
        raise AssertionError("–ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
    except Exception:
        logger.info("‚úÖ –ù–µ–≤–∞–ª–∏–¥–Ω–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã DoD...")
    
    try:
        # –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
        test_file_loading()
        
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        test_validation()
        
        # –¢–µ—Å—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
        results = await test_system_components()
        
        # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print("\n" + "="*60)
        print("üéØ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ö–û–ú–ü–õ–ï–ö–°–ù–û–ô –°–ò–°–¢–ï–ú–´ DoD")
        print("="*60)
        print(f"‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print(f"üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤: {results['statistics']['total_dialogs']}")
        print(f"üìù –ò–∑–≤–ª–µ—á–µ–Ω–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(results['all_mentions'])}")
        print(f"üéØ –ù–∞–π–¥–µ–Ω–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤: {len(results['clusters'])}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {results['statistics']['success_rate']:.1%}")
        print(f"üîç DoD —Å—Ç–∞—Ç—É—Å: {'‚úÖ –ü–†–û–ô–î–ï–ù' if results['quality_results'].get('dod_passed') else '‚ùå –ù–ï –ü–†–û–ô–î–ï–ù'}")
        print("="*60)
        
        logger.info("üéâ –ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
