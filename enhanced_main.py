#!/usr/bin/env python3
"""
Enhanced Dialogs RAG System - Main Entry Point
–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤
"""

import asyncio
import json
import logging
import argparse
import sys
from pathlib import Path
from typing import List, Dict, Any
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from enhanced.integrated_system import IntegratedQualitySystem, ProcessingConfig

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('enhanced_system.log'),
        logging.StreamHandler()
    ]
)

logger = logging.getLogger(__name__)

def load_dialogs_from_file(file_path: str) -> List[str]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    file_path = Path(file_path)
    
    if file_path.suffix == '.xlsx':
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ Excel
        df = pd.read_excel(file_path)
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –¥–∏–∞–ª–æ–≥–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ 'dialog' –∏–ª–∏ –∫–æ–ª–æ–Ω–∫–µ —Å —Ç–µ–∫—Å—Ç–æ–º
        if 'dialog' in df.columns:
            dialogs = df['dialog'].dropna().tolist()
        elif '–¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏' in df.columns:
            dialogs = df['–¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏'].dropna().tolist()
        else:
            # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º (—Å–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞)
            text_columns = []
            for col in df.columns:
                if df[col].dtype == 'object':  # –°—Ç—Ä–æ–∫–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
                    avg_length = df[col].astype(str).str.len().mean()
                    text_columns.append((col, avg_length))
            
            if text_columns:
                # –ë–µ—Ä–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —Å–∞–º—ã–º –¥–ª–∏–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
                text_col = max(text_columns, key=lambda x: x[1])[0]
                dialogs = df[text_col].dropna().tolist()
            else:
                dialogs = df.iloc[:, 0].dropna().tolist()
    
    elif file_path.suffix == '.json':
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ JSON
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
        
        if isinstance(data, list):
            dialogs = data
        elif isinstance(data, dict) and 'dialogs' in data:
            dialogs = data['dialogs']
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON —Ñ–∞–π–ª–∞")
    
    elif file_path.suffix == '.txt':
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
        with open(file_path, 'r', encoding='utf-8') as f:
            dialogs = [line.strip() for line in f if line.strip()]
    
    else:
        raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞: {file_path.suffix}")
    
    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(dialogs)} –¥–∏–∞–ª–æ–≥–æ–≤ –∏–∑ {file_path}")
    return dialogs

def create_default_config() -> Dict[str, Any]:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
    return {
        'openai_api_key': 'your-api-key-here',
        'processing': {
            'enable_autocorrection': True,
            'enable_adaptive_prompts': True,
            'enable_continuous_learning': True,
            'enable_monitoring': True,
            'enable_scaling': True,
            'max_dialogs_per_batch': 1000,
            'quality_threshold': 0.7,
            'auto_save_results': True,
            'output_directory': 'enhanced_results'
        },
        'redis_host': 'localhost',
        'redis_port': 6379,
        'redis_db': 0
    }

def save_config(config: Dict[str, Any], config_path: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    with open(config_path, 'w', encoding='utf-8') as f:
        json.dump(config, f, ensure_ascii=False, indent=2)

def load_config(config_path: str) -> Dict[str, Any]:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    with open(config_path, 'r', encoding='utf-8') as f:
        return json.load(f)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description='Enhanced Dialogs RAG System')
    parser.add_argument('--input', '-i', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∏–∞–ª–æ–≥–∞–º–∏')
    parser.add_argument('--output', '-o', default='enhanced_results', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
    parser.add_argument('--config', '-c', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--quality-threshold', type=float, default=0.7, help='–ü–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞ (0.0-1.0)')
    parser.add_argument('--max-batch-size', type=int, default=1000, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞')
    parser.add_argument('--enable-all', action='store_true', help='–í–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è')
    parser.add_argument('--disable-autocorrection', action='store_true', help='–û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—é')
    parser.add_argument('--disable-adaptive-prompts', action='store_true', help='–û—Ç–∫–ª—é—á–∏—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã')
    parser.add_argument('--disable-learning', action='store_true', help='–û—Ç–∫–ª—é—á–∏—Ç—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ')
    parser.add_argument('--disable-monitoring', action='store_true', help='–û—Ç–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥')
    parser.add_argument('--disable-scaling', action='store_true', help='–û—Ç–∫–ª—é—á–∏—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ')
    parser.add_argument('--create-config', help='–°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--show-dashboard', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ –∫–∞—á–µ—Å—Ç–≤–∞')
    parser.add_argument('--optimize-for', type=int, help='–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è N –¥–∏–∞–ª–æ–≥–æ–≤')
    
    args = parser.parse_args()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if args.create_config:
        config = create_default_config()
        save_config(config, args.create_config)
        print(f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {args.create_config}")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    if not args.input:
        print("–û—à–∏–±–∫–∞: —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å --input –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤")
        print("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏")
        return
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if args.config and Path(args.config).exists():
        config = load_config(args.config)
    else:
        config = create_default_config()
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    if args.enable_all:
        config['processing'].update({
            'enable_autocorrection': True,
            'enable_adaptive_prompts': True,
            'enable_continuous_learning': True,
            'enable_monitoring': True,
            'enable_scaling': True
        })
    
    if args.disable_autocorrection:
        config['processing']['enable_autocorrection'] = False
    
    if args.disable_adaptive_prompts:
        config['processing']['enable_adaptive_prompts'] = False
    
    if args.disable_learning:
        config['processing']['enable_continuous_learning'] = False
    
    if args.disable_monitoring:
        config['processing']['enable_monitoring'] = False
    
    if args.disable_scaling:
        config['processing']['enable_scaling'] = False
    
    config['processing']['output_directory'] = args.output
    config['processing']['quality_threshold'] = args.quality_threshold
    config['processing']['max_dialogs_per_batch'] = args.max_batch_size
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤
    try:
        dialogs = load_dialogs_from_file(args.input)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤: {e}")
        return
    
    if not dialogs:
        logger.error("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        return
    
    print(f"üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤")
    print(f"üìä –î–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(dialogs)}")
    print(f"‚öôÔ∏è  –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config['processing']}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
    try:
        system = IntegratedQualitySystem(config)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
        return
    
    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞
    if args.optimize_for:
        optimization = system.optimize_system_for_volume(args.optimize_for)
        print(f"üîß –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è {args.optimize_for} –¥–∏–∞–ª–æ–≥–æ–≤:")
        for rec in optimization.get('recommendations', []):
            print(f"   ‚Ä¢ {rec}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤
    try:
        results = await system.process_dialogs_enhanced(dialogs)
        
        print(f"\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"üìà –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
        quality_scores = [r.get('quality_score', 0) for r in results if r.get('quality_score', 0) > 0]
        if quality_scores:
            avg_quality = sum(quality_scores) / len(quality_scores)
            print(f"üéØ –°—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ: {avg_quality:.2f}")
            
            high_quality = sum(1 for q in quality_scores if q >= 0.8)
            print(f"‚≠ê –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ (‚â•0.8): {high_quality}/{len(quality_scores)} ({high_quality/len(quality_scores)*100:.1f}%)")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—É—â–Ω–æ—Å—Ç—è–º
        total_problems = sum(len(r.get('extracted_entities', {}).get('problems', [])) for r in results)
        total_ideas = sum(len(r.get('extracted_entities', {}).get('ideas', [])) for r in results)
        total_barriers = sum(len(r.get('extracted_entities', {}).get('barriers', [])) for r in results)
        total_quotes = sum(len(r.get('extracted_entities', {}).get('quotes', [])) for r in results)
        
        print(f"\nüìä –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏:")
        print(f"   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã: {total_problems}")
        print(f"   ‚Ä¢ –ò–¥–µ–∏: {total_ideas}")
        print(f"   ‚Ä¢ –ë–∞—Ä—å–µ—Ä—ã: {total_barriers}")
        print(f"   ‚Ä¢ –¶–∏—Ç–∞—Ç—ã: {total_quotes}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥
        if args.show_dashboard:
            print(f"\nüåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∞—à–±–æ—Ä–¥ –∫–∞—á–µ—Å—Ç–≤–∞...")
            system.monitor.open_dashboard(f"{args.output}/quality_dashboard.html")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_path = Path(args.output) / "config.json"
        save_config(config, str(config_path))
        
        print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {args.output}")
        print(f"üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {config_path}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return

def show_help():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    help_text = """
üéØ Enhanced Dialogs RAG System - –°–∏—Å—Ç–µ–º–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤

–û–°–ù–û–í–ù–û–ï –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    python enhanced_main.py --input dialogs.xlsx --output results

–ü–ê–†–ê–ú–ï–¢–†–´:
    --input, -i          –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∏–∞–ª–æ–≥–∞–º–∏ (xlsx, json, txt)
    --output, -o         –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: enhanced_results)
    --config, -c         –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    --quality-threshold  –ü–æ—Ä–æ–≥ –∫–∞—á–µ—Å—Ç–≤–∞ (0.0-1.0, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.7)
    --max-batch-size     –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1000)

–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–û–ú–ü–û–ù–ï–ù–¢–ê–ú–ò:
    --enable-all                    –í–∫–ª—é—á–∏—Ç—å –≤—Å–µ —É–ª—É—á—à–µ–Ω–∏—è
    --disable-autocorrection        –û—Ç–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—é –∫–∞—á–µ—Å—Ç–≤–∞
    --disable-adaptive-prompts      –û—Ç–∫–ª—é—á–∏—Ç—å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
    --disable-learning              –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
    --disable-monitoring            –û—Ç–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    --disable-scaling               –û—Ç–∫–ª—é—á–∏—Ç—å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ

–î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ü–¶–ò–ò:
    --create-config FILE            –°–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    --show-dashboard                –ü–æ–∫–∞–∑–∞—Ç—å –¥–∞—à–±–æ—Ä–¥ –∫–∞—á–µ—Å—Ç–≤–∞
    --optimize-for N                –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è N –¥–∏–∞–ª–æ–≥–æ–≤

–ü–†–ò–ú–ï–†–´:
    # –ë–∞–∑–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    python enhanced_main.py --input dialogs.xlsx --output results

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π
    python enhanced_main.py --input dialogs.xlsx --enable-all --show-dashboard

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–æ–≥–æ –æ–±—ä–µ–º–∞ (10,000 –¥–∏–∞–ª–æ–≥–æ–≤)
    python enhanced_main.py --input large_dialogs.xlsx --optimize-for 10000 --max-batch-size 2000

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    python enhanced_main.py --create-config my_config.json

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
    python enhanced_main.py --input dialogs.xlsx --config my_config.json

–§–û–†–ú–ê–¢–´ –í–•–û–î–ù–´–• –§–ê–ô–õ–û–í:
    ‚Ä¢ Excel (.xlsx) - –¥–∏–∞–ª–æ–≥–∏ –≤ –∫–æ–ª–æ–Ω–∫–µ 'dialog' –∏–ª–∏ –ø–µ—Ä–≤–æ–π –∫–æ–ª–æ–Ω–∫–µ
    ‚Ä¢ JSON (.json) - –º–∞—Å—Å–∏–≤ –¥–∏–∞–ª–æ–≥–æ–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç —Å –∫–ª—é—á–æ–º 'dialogs'
    ‚Ä¢ –¢–µ–∫—Å—Ç (.txt) - –æ–¥–∏–Ω –¥–∏–∞–ª–æ–≥ –Ω–∞ —Å—Ç—Ä–æ–∫—É

–†–ï–ó–£–õ–¨–¢–ê–¢–´:
    ‚Ä¢ enhanced_results.json - –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    ‚Ä¢ processing_statistics.json - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    ‚Ä¢ quality_dashboard.html - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥
    ‚Ä¢ processing_report.md - —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    ‚Ä¢ config.json - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è

–ö–û–ú–ü–û–ù–ï–ù–¢–´ –°–ò–°–¢–ï–ú–´:
    üîß –ê–≤—Ç–æ–∫–æ—Ä—Ä–µ–∫—Ü–∏—è –∫–∞—á–µ—Å—Ç–≤–∞ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫
    üéØ –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã - A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
    üß† –ù–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ - —É–ª—É—á—à–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
    üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
    ‚ö° –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–º–æ—â–∏: python enhanced_main.py --help
    """
    print(help_text)

if __name__ == "__main__":
    if len(sys.argv) == 1 or '--help' in sys.argv or '-h' in sys.argv:
        show_help()
    else:
        asyncio.run(main())
