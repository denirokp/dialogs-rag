#!/usr/bin/env python3
"""
Pipeline Dashboard - –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è pipeline –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤
"""

import streamlit as st
import requests
import json
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
from pathlib import Path
import time
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Dialogs RAG Pipeline Dashboard",
    page_icon="üîç",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API
API_BASE_URL = "http://localhost:8000"

class APIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Pipeline API"""
    
    def __init__(self, base_url: str):
        self.base_url = base_url
    
    def _request(self, method: str, endpoint: str, **kwargs):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ HTTP –∑–∞–ø—Ä–æ—Å–∞"""
        url = f"{self.base_url}{endpoint}"
        try:
            response = requests.request(method, url, **kwargs)
            response.raise_for_status()
            return response.json()
        except requests.exceptions.RequestException as e:
            st.error(f"–û—à–∏–±–∫–∞ API: {e}")
            return None
    
    def get_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
        return self._request("GET", "/health")
    
    def run_pipeline(self, input_file: str, stages: list = None, config: dict = None):
        """–ó–∞–ø—É—Å–∫ pipeline"""
        params = {"input_file": input_file}
        if stages:
            params["stages"] = stages
        if config:
            params["config"] = config
        return self._request("POST", "/pipeline/run", params=params)
    
    def get_pipeline_status(self, request_id: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ pipeline"""
        return self._request("GET", f"/pipeline/status/{request_id}")
    
    def get_pipeline_results(self, request_id: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ pipeline"""
        return self._request("GET", f"/pipeline/results/{request_id}")
    
    def list_analyses(self, user_id: str = None, limit: int = 10):
        """–°–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–æ–≤"""
        params = {"limit": limit}
        if user_id:
            params["user_id"] = user_id
        return self._request("GET", "/pipeline/analyses", params=params)
    
    def get_stage_data(self, stage_id: str):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —ç—Ç–∞–ø–∞"""
        return self._request("GET", f"/data/stage/{stage_id}")
    
    def get_artifacts_summary(self):
        """–°–≤–æ–¥–∫–∞ –ø–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞–º"""
        return self._request("GET", "/data/artifacts")
    
    def get_available_reports(self):
        """–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤"""
        return self._request("GET", "/data/reports")
    
    def get_system_info(self):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"""
        return self._request("GET", "/system/info")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API –∫–ª–∏–µ–Ω—Ç–∞
api_client = APIClient(API_BASE_URL)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞"""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown("""
    <div style="text-align: center; padding: 2rem 0;">
        <h1 style="color: #2E86AB; margin-bottom: 0.5rem;">üîç Dialogs RAG Pipeline Dashboard</h1>
        <p style="color: #666; font-size: 1.1rem;">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ pipeline –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤</p>
    </div>
    """, unsafe_allow_html=True)
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
        if st.button("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", use_container_width=True):
            health = api_client.get_health()
            if health:
                st.success("‚úÖ API –ø–æ–¥–∫–ª—é—á–µ–Ω")
            else:
                st.error("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ pipeline
        st.subheader("üìã Pipeline –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
        input_file = st.selectbox(
            "–§–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
            options=["data/dialogs.xlsx"],
            help="–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª —Å –¥–∏–∞–ª–æ–≥–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
        )
        
        # –í—ã–±–æ—Ä —ç—Ç–∞–ø–æ–≤
        st.subheader("üéØ –≠—Ç–∞–ø—ã –∞–Ω–∞–ª–∏–∑–∞")
        stages_config = {
            "1": ("–î–µ—Ç–µ–∫—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏", True),
            "2": ("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π", True),
            "3": ("–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫", True),
            "4": ("–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è", True),
            "5": ("–ê–≥—Ä–µ–≥–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫", True),
            "6": ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤", True)
        }
        
        selected_stages = []
        for stage_id, (stage_name, default) in stages_config.items():
            if st.checkbox(f"{stage_id}. {stage_name}", value=default, key=f"stage_{stage_id}"):
                selected_stages.append(stage_id)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        st.subheader("‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        skip_failed = st.checkbox("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö", value=False)
        parallel_execution = st.checkbox("–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ", value=False)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
        if st.button("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Pipeline", use_container_width=True, type="primary"):
            if not selected_stages:
                st.error("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —ç—Ç–∞–ø")
            else:
                config = {
                    "skip_failed_stages": skip_failed,
                    "parallel_execution": parallel_execution
                }
                
                with st.spinner("–ó–∞–ø—É—Å–∫ pipeline..."):
                    result = api_client.run_pipeline(input_file, selected_stages, config)
                    if result:
                        st.session_state.current_analysis = result
                        st.success(f"Pipeline –∑–∞–ø—É—â–µ–Ω! ID: {result['request_id']}")
                        st.rerun()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üè† –ì–ª–∞–≤–Ω–∞—è", "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "üöÄ Pipeline", "üìÅ –§–∞–π–ª—ã", "‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞"
    ])
    
    with tab1:
        show_overview()
    
    with tab2:
        show_analytics()
    
    with tab3:
        show_pipeline_management()
    
    with tab4:
        show_files()
    
    with tab5:
        show_system_info()

def show_overview():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ–±–∑–æ—Ä–æ–º"""
    st.header("üìä –û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
    system_info = api_client.get_system_info()
    if not system_info:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ")
        return
    
    # –ú–µ—Ç—Ä–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤",
            system_info["pipeline_info"]["active_analyses"],
            delta=None
        )
    
    with col2:
        st.metric(
            "–í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤",
            system_info["pipeline_info"]["total_analyses"],
            delta=None
        )
    
    with col3:
        st.metric(
            "–ê—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤",
            system_info["artifacts_summary"]["total_files"],
            delta=None
        )
    
    with col4:
        st.metric(
            "–û—Ç—á–µ—Ç–æ–≤",
            system_info["available_reports"],
            delta=None
        )
    
    # –ì—Ä–∞—Ñ–∏–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    st.subheader("üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–Ω–∞–ª–∏–∑–æ–≤")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–Ω–∞–ª–∏–∑–æ–≤
    analyses = api_client.list_analyses(limit=20)
    if analyses and "analyses" in analyses:
        df_analyses = pd.DataFrame(analyses["analyses"])
        
        if not df_analyses.empty:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
            df_analyses["created_at"] = pd.to_datetime(df_analyses["created_at"])
            df_analyses["date"] = df_analyses["created_at"].dt.date
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
            daily_counts = df_analyses.groupby("date").size().reset_index(name="count")
            
            # –°—Ç—Ä–æ–∏–º –≥—Ä–∞—Ñ–∏–∫
            fig = px.line(
                daily_counts, 
                x="date", 
                y="count",
                title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤ –ø–æ –¥–Ω—è–º",
                markers=True
            )
            fig.update_layout(
                xaxis_title="–î–∞—Ç–∞",
                yaxis_title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–æ–≤",
                height=400
            )
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–Ω–∞–ª–∏–∑–∞—Ö")

def show_analytics():
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    st.header("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    # –í—ã–±–æ—Ä —ç—Ç–∞–ø–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    stage_id = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —ç—Ç–∞–ø –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞",
        options=["1", "2", "3", "4", "5", "6"],
        format_func=lambda x: {
            "1": "1. –î–µ—Ç–µ–∫—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏",
            "2": "2. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π",
            "3": "3. –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫",
            "4": "4. –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è",
            "5": "5. –ê–≥—Ä–µ–≥–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫",
            "6": "6. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤"
        }[x]
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —ç—Ç–∞–ø–∞
    stage_data = api_client.get_stage_data(stage_id)
    if not stage_data:
        st.warning("–î–∞–Ω–Ω—ã–µ —ç—Ç–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    st.subheader(f"–î–∞–Ω–Ω—ã–µ —ç—Ç–∞–ø–∞ {stage_id}")
    
    if "data" in stage_data:
        # –¢–∞–±–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        df = pd.DataFrame(stage_data["data"])
        st.dataframe(df, use_container_width=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        col1, col2 = st.columns(2)
        
        with col1:
            st.metric("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", stage_data["count"])
        
        with col2:
            if "delivery_discussed" in df.columns:
                delivery_rate = df["delivery_discussed"].mean() * 100
                st.metric("–ü—Ä–æ—Ü–µ–Ω—Ç —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π", f"{delivery_rate:.1f}%")
    
    elif "content" in stage_data:
        # Markdown –∫–æ–Ω—Ç–µ–Ω—Ç
        st.markdown(stage_data["content"])
    
    else:
        st.json(stage_data)

def show_pipeline_management():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ pipeline"""
    st.header("üöÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Pipeline")
    
    # –¢–µ–∫—É—â–∏–π –∞–Ω–∞–ª–∏–∑
    if "current_analysis" in st.session_state:
        st.subheader("üîÑ –¢–µ–∫—É—â–∏–π –∞–Ω–∞–ª–∏–∑")
        analysis = st.session_state.current_analysis
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.text(f"ID: {analysis['request_id']}")
        with col2:
            st.text(f"–°—Ç–∞—Ç—É—Å: {analysis['status']}")
        with col3:
            if analysis['completed_at']:
                st.text(f"–ó–∞–≤–µ—Ä—à–µ–Ω: {analysis['completed_at']}")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å"):
            updated_status = api_client.get_pipeline_status(analysis['request_id'])
            if updated_status:
                st.session_state.current_analysis.update(updated_status)
                st.rerun()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if analysis['status'] == 'completed':
            st.success("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            
            if st.button("üìä –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"):
                results = api_client.get_pipeline_results(analysis['request_id'])
                if results:
                    st.json(results)
    
    # –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤
    st.subheader("üìö –ò—Å—Ç–æ—Ä–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤")
    
    analyses = api_client.list_analyses(limit=10)
    if analyses and "analyses" in analyses:
        df_analyses = pd.DataFrame(analyses["analyses"])
        
        if not df_analyses.empty:
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å—É
            status_filter = st.selectbox(
                "–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É",
                options=["–í—Å–µ", "completed", "running", "failed"],
                key="status_filter"
            )
            
            if status_filter != "–í—Å–µ":
                df_analyses = df_analyses[df_analyses["status"] == status_filter]
            
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
            st.dataframe(
                df_analyses[["request_id", "status", "message", "created_at"]],
                use_container_width=True
            )
        else:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∞–Ω–∞–ª–∏–∑–∞—Ö")
    else:
        st.info("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∞–Ω–∞–ª–∏–∑–æ–≤")

def show_files():
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏"""
    st.header("üìÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞–º–∏")
    
    # –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã
    st.subheader("üì¶ –ê—Ä—Ç–µ—Ñ–∞–∫—Ç—ã")
    artifacts_summary = api_client.get_artifacts_summary()
    if artifacts_summary:
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤", artifacts_summary["total_files"])
        with col2:
            st.metric("–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä", f"{artifacts_summary['total_size'] / 1024:.1f} KB")
        with col3:
            st.metric("–ü–æ —ç—Ç–∞–ø–∞–º", len(artifacts_summary["by_stage"]))
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —ç—Ç–∞–ø–∞–º
        if artifacts_summary["by_stage"]:
            st.subheader("üìä –§–∞–π–ª—ã –ø–æ —ç—Ç–∞–ø–∞–º")
            stage_data = pd.DataFrame([
                {"–≠—Ç–∞–ø": stage, "–§–∞–π–ª–æ–≤": count}
                for stage, count in artifacts_summary["by_stage"].items()
            ])
            st.dataframe(stage_data, use_container_width=True)
    
    # –û—Ç—á–µ—Ç—ã
    st.subheader("üìã –û—Ç—á–µ—Ç—ã")
    reports = api_client.get_available_reports()
    if reports:
        df_reports = pd.DataFrame(reports)
        st.dataframe(df_reports, use_container_width=True)
        
        # –ö–Ω–æ–ø–∫–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        for report in reports:
            if st.button(f"üì• –°–∫–∞—á–∞—Ç—å {report['name']}", key=f"download_{report['name']}"):
                st.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ {report['name']}...")
    else:
        st.info("–û—Ç—á–µ—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

def show_system_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ"""
    st.header("‚öôÔ∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    
    system_info = api_client.get_system_info()
    if not system_info:
        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ")
        return
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ pipeline
    st.subheader("üîß Pipeline")
    pipeline_info = system_info["pipeline_info"]
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.json({
            "–ê–∫—Ç–∏–≤–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤": pipeline_info["active_analyses"],
            "–í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤": pipeline_info["total_analyses"]
        })
    
    with col2:
        st.json(pipeline_info["default_config"])
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ç–∞–ø—ã
    st.subheader("üéØ –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ç–∞–ø—ã")
    stages_df = pd.DataFrame([
        {"ID": stage_id, "–ù–∞–∑–≤–∞–Ω–∏–µ": stage_name}
        for stage_id, stage_name in pipeline_info["available_stages"].items()
    ])
    st.dataframe(stages_df, use_container_width=True)
    
    # –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã
    st.subheader("üìù –°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏")
    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–≥–∏"):
        logs = api_client._request("GET", "/system/logs")
        if logs and "logs" in logs:
            st.text_area("–õ–æ–≥–∏", "\n".join(logs["logs"][-50:]), height=400)
        else:
            st.warning("–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")

if __name__ == "__main__":
    main()
