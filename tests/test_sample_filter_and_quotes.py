import json
import re
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent.parent))

from utils.turns import split_turns
from pipeline.stage1_5_sample_filter import analyze_dialog
from pipeline.stage2_extract_entities import pick_client_quotes

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏
dialog_136110073 = """–û–ø–µ—Ä–∞—Ç–æ—Ä: –ê–ª–ª–æ –¥–æ–±—Ä—ã–π –¥–µ–Ω—å.
–ö–ª–∏–µ–Ω—Ç: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ.
–û–ø–µ—Ä–∞—Ç–æ—Ä: –°–ª—É—à–∞—é –≤–∞—Å.
–ö–ª–∏–µ–Ω—Ç: –î–∞, —É –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å –ø–æ —Ä–µ–∫–ª–∞–º–µ.
–û–ø–µ—Ä–∞—Ç–æ—Ä: –î–∞, —Å–ª—É—à–∞—é.
–ö–ª–∏–µ–Ω—Ç: –í–æ—Ç —É –º–µ–Ω—è –µ—Å—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, –Ω–æ –æ–Ω–æ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è.
–û–ø–µ—Ä–∞—Ç–æ—Ä: –ü–æ–Ω—è—Ç–Ω–æ, –¥–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º—Å—è.
–ö–ª–∏–µ–Ω—Ç: –í–æ–æ–±—â–µ –Ω–µ —Ö–æ—á–µ—Ç—Å—è, –≤—ã—Å–∞—Å—ã–≤–∞—é—Ç –¥–µ–Ω—å–≥–∏.
–û–ø–µ—Ä–∞—Ç–æ—Ä: –ü–æ–Ω–∏–º–∞—é –≤–∞—à—É —Å–∏—Ç—É–∞—Ü–∏—é.
–ö–ª–∏–µ–Ω—Ç: –î–∞, —Å–ø–∞—Å–∏–±–æ."""

dialog_136110136 = """–û–ø–µ—Ä–∞—Ç–æ—Ä: –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∫–∞–∫ –¥–µ–ª–∞?
–ö–ª–∏–µ–Ω—Ç: –î–∞.
–û–ø–µ—Ä–∞—Ç–æ—Ä: –•–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å —Ç–∞—Ä–∏—Ñ –∑–∞ —É—Å–ø–µ—à–Ω—ã–µ —Å–¥–µ–ª–∫–∏?
–ö–ª–∏–µ–Ω—Ç: –£–≥—É, —Ö–æ—Ä–æ—à–æ. –ü–æ–¥—É–º–∞–µ–º.
–û–ø–µ—Ä–∞—Ç–æ—Ä: –û—Ç–ª–∏—á–Ω–æ, –∂–¥–µ–º –≤–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è.
–ö–ª–∏–µ–Ω—Ç: –•–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ."""

dialog_136110545 = """–û–ø–µ—Ä–∞—Ç–æ—Ä: –î–æ–±—Ä—ã–π –¥–µ–Ω—å, —É –Ω–∞—Å –µ—Å—Ç—å —Å—Ç—Ä–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π.
–ö–ª–∏–µ–Ω—Ç: –ù—É –ø–æ–π–¥—ë—Ç –º–∏–Ω—É—Ç 5 –º–æ–≥—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å.
–û–ø–µ—Ä–∞—Ç–æ—Ä: –ö–æ–Ω–µ—á–Ω–æ, —Ä–∞—Å—Å–∫–∞–∂—É –ø—Ä–æ –Ω–∞—à–∏ —É—Å–ª—É–≥–∏.
–ö–ª–∏–µ–Ω—Ç: –ù—É —è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω–∏–º–∞—é —É –Ω–∞—Å-—Ç–æ —Å–µ–π—á–∞—Å —Å–∞–º–æ–≤—ã–≤–æ–∑ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –µ—Å—Ç—å –∫–æ–Ω–µ—á–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω –ª–∏ —É –º–µ–Ω—è, —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç–∞–≤–∫–æ–π.
–û–ø–µ—Ä–∞—Ç–æ—Ä: –ù–µ—Ç –≤–æ—Ç —Å—Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç–∞–≤–∫–∞ —Å–∏–ª–∞–º–∏ –ø—Ä–æ–¥–∞–≤—Ü–∞.
–ö–ª–∏–µ–Ω—Ç: –ó–Ω–∞—á–∏—Ç –æ—à–∏–±–ª–∏—Å—å.
–ö–ª–∏–µ–Ω—Ç: –ß–µ–ª–æ–≤–µ–∫ –≤–≤–æ–¥–∏—Ç –∫–∞—Ä—Ç—É, –∞ –¥–∞–ª—å—à–µ —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç?
–û–ø–µ—Ä–∞—Ç–æ—Ä: –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Ç–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –∫—É—Ä—å–µ—Ä–æ–º.
–ö–ª–∏–µ–Ω—Ç: –ü–æ–Ω—è—Ç–Ω–æ, —Å–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."""


def test_136110073_platform_noise():
    """–¢–µ—Å—Ç: –¥–∏–∞–ª–æ–≥ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω—ã–º —à—É–º–æ–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω"""
    dialog = {
        "ID –∑–≤–æ–Ω–∫–∞": "136110073",
        "–¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏": dialog_136110073,
        "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫)": 600
    }
    result = analyze_dialog(dialog)
    assert result["valid_sample"] is False
    assert result["reason"] in {"platform_noise", "no_client_kw", "no_marker"}


def test_136110136_platform_noise():
    """–¢–µ—Å—Ç: –¥–∏–∞–ª–æ–≥ —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω"""
    dialog = {
        "ID –∑–≤–æ–Ω–∫–∞": "136110136", 
        "–¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏": dialog_136110136,
        "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫)": 480
    }
    result = analyze_dialog(dialog)
    assert result["valid_sample"] is False
    assert result["reason"] in {"platform_noise", "no_client_kw", "no_marker"}


def test_136110545_delivery_and_quotes():
    """–¢–µ—Å—Ç: –¥–∏–∞–ª–æ–≥ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ü–∏—Ç–∞—Ç—ã (–º–æ–∂–µ—Ç –Ω–µ –ø—Ä–æ–π—Ç–∏ —Ñ–∏–ª—å—Ç—Ä –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –º–∞—Ä–∫–µ—Ä–æ–≤)"""
    dialog = {
        "ID –∑–≤–æ–Ω–∫–∞": "136110545",
        "–¢–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–±–∞—Ü–∏–∏": dialog_136110545,
        "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫)": 900
    }
    result = analyze_dialog(dialog)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∏–∞–ª–æ–≥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
    assert result["dialog_id"] == "136110545"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ–∏–ª—å—Ç—Ä–∞
    turns = split_turns(dialog_136110545)
    quotes = pick_client_quotes(turns, limit=3)
    assert len(quotes) >= 1
    # —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ —Ü–∏—Ç–∞—Ç–∞ –ø—Ä–æ —Å–∞–º–æ–≤—ã–≤–æ–∑/–¥–æ—Å—Ç–∞–≤–∫—É
    assert any(re.search(r"(—Å–∞–º–æ–≤—ã–≤–æ–∑|–¥–æ—Å—Ç–∞–≤–∫)", q["quote"].lower()) for q in quotes)


def test_quotes_pii_masking():
    """–¢–µ—Å—Ç: –º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ PII –≤ —Ü–∏—Ç–∞—Ç–∞—Ö"""
    test_turns = [
        {"speaker": "–∫–ª–∏–µ–Ω—Ç", "text": "–ú–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω 89123456789, email test@example.com"},
        {"speaker": "–∫–ª–∏–µ–Ω—Ç", "text": "–ù—É–∂–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º"}
    ]
    
    quotes = pick_client_quotes(test_turns, limit=3)
    assert len(quotes) >= 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ PII –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω—ã
    for quote in quotes:
        assert "[masked-phone]" in quote["quote"] or "89123456789" not in quote["quote"]
        assert "[masked-email]" in quote["quote"] or "test@example.com" not in quote["quote"]


def test_quotes_length_filtering():
    """–¢–µ—Å—Ç: —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ü–∏—Ç–∞—Ç –ø–æ –¥–ª–∏–Ω–µ"""
    test_turns = [
        {"speaker": "–∫–ª–∏–µ–Ω—Ç", "text": "–î–∞"},  # —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è
        {"speaker": "–∫–ª–∏–µ–Ω—Ç", "text": "–ù—É–∂–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º –≤ –ú–æ—Å–∫–≤—É"},  # –ø–æ–¥—Ö–æ–¥—è—â–∞—è
        {"speaker": "–∫–ª–∏–µ–Ω—Ç", "text": "–û—á–µ–Ω—å –¥–ª–∏–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ " * 50}  # —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è
    ]
    
    quotes = pick_client_quotes(test_turns, limit=3)
    assert len(quotes) == 1
    assert "–¥–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º" in quotes[0]["quote"]


def test_quotes_two_stage_search():
    """–¢–µ—Å—Ç: –¥–≤—É—Ö—ç—Ç–∞–ø–Ω—ã–π –ø–æ–∏—Å–∫ —Ü–∏—Ç–∞—Ç"""
    test_turns = [
        {"speaker": "–∫–ª–∏–µ–Ω—Ç", "text": "–ü—Ä–æ—Å—Ç–æ –≤–æ–ø—Ä–æ—Å"},  # –±–µ–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        {"speaker": "–æ–ø–µ—Ä–∞—Ç–æ—Ä", "text": "–£ –Ω–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∞ –°–î–≠–ö"},  # –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        {"speaker": "–∫–ª–∏–µ–Ω—Ç", "text": "–ê —Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç?"},  # –∫–ª–∏–µ–Ω—Ç —Ä—è–¥–æ–º —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
        {"speaker": "–∫–ª–∏–µ–Ω—Ç", "text": "–ù—É–∂–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º"}  # –∫–ª–∏–µ–Ω—Ç —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
    ]
    
    quotes = pick_client_quotes(test_turns, limit=3)
    assert len(quotes) >= 2
    # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ü–∏—Ç–∞—Ç—ã –∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏, –∏ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ —Ä—è–¥–æ–º —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º
    assert any("–¥–æ—Å—Ç–∞–≤–∫–∞ –∫—É—Ä—å–µ—Ä–æ–º" in q["quote"] for q in quotes)
    assert any("—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç" in q["quote"] for q in quotes)


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
    test_136110073_platform_noise()
    print("‚úÖ test_136110073_platform_noise passed")
    
    test_136110136_platform_noise()
    print("‚úÖ test_136110136_platform_noise passed")
    
    test_136110545_delivery_and_quotes()
    print("‚úÖ test_136110545_delivery_and_quotes passed")
    
    test_quotes_pii_masking()
    print("‚úÖ test_quotes_pii_masking passed")
    
    test_quotes_length_filtering()
    print("‚úÖ test_quotes_length_filtering passed")
    
    test_quotes_two_stage_search()
    print("‚úÖ test_quotes_two_stage_search passed")
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
