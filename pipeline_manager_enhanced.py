#!/usr/bin/env python3
"""
Enhanced Pipeline Manager
–£–ø—Ä–∞–≤–ª—è–µ—Ç —É–ª—É—á—à–µ–Ω–Ω—ã–º pipeline —Å –Ω–æ–≤—ã–º–∏ —ç—Ç–∞–ø–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞
"""

import argparse
import logging
import sys
from pathlib import Path
from typing import List, Dict, Any
import json
import pandas as pd

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —ç—Ç–∞–ø–æ–≤
ENHANCED_STAGES = {
    "1": {
        "name": "–î–µ—Ç–µ–∫—Ü–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏",
        "script": "pipeline/stage1_detect_delivery.py",
        "description": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π"
    },
    "1.5": {
        "name": "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—ã–±–æ—Ä–∫–∏",
        "script": "pipeline/stage1_5_sample_filter.py", 
        "description": "–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–±–æ—Ä–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤"
    },
    "2": {
        "name": "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π (–±–∞–∑–æ–≤–æ–µ)",
        "script": "pipeline/stage2_extract_entities.py",
        "description": "–ë–∞–∑–æ–≤–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –±–∞—Ä—å–µ—Ä–æ–≤, –∏–¥–µ–π –∏ —Å–∏–≥–Ω–∞–ª–æ–≤"
    },
    "2_enhanced": {
        "name": "–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É—â–Ω–æ—Å—Ç–µ–π (—É–ª—É—á—à–µ–Ω–Ω–æ–µ)",
        "script": "pipeline/stage2_extract_entities_enhanced.py",
        "description": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º"
    },
    "2.5": {
        "name": "–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
        "script": "pipeline/stage2_5_contextual_analysis.py",
        "description": "–ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–∏–Ω–∞–º–∏–∫–∏"
    },
    "3": {
        "name": "–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è",
        "script": "pipeline/stage3_normalize.py",
        "description": "–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è"
    },
    "4": {
        "name": "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è (–±–∞–∑–æ–≤–∞—è)",
        "script": "pipeline/stage4_cluster.py",
        "description": "–ë–∞–∑–æ–≤–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –ø–æ—Ö–æ–∂–∏—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫"
    },
    "4_enhanced": {
        "name": "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è (—É–ª—É—á—à–µ–Ω–Ω–∞—è)",
        "script": "pipeline/stage4_cluster_enhanced.py",
        "description": "–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è —Å embeddings"
    },
    "4.5": {
        "name": "–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–æ–≥–∞—â–µ–Ω–∏–µ",
        "script": "pipeline/stage4_5_semantic_enrichment.py",
        "description": "–û–±–æ–≥–∞—â–µ–Ω–∏–µ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"
    },
    "5": {
        "name": "–ê–≥—Ä–µ–≥–∞—Ü–∏—è",
        "script": "pipeline/stage5_aggregate.py",
        "description": "–ê–≥—Ä–µ–≥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏"
    },
    "6": {
        "name": "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤",
        "script": "pipeline/stage6_report.py",
        "description": "–°–æ–∑–¥–∞–Ω–∏–µ Markdown –∏ Excel –æ—Ç—á–µ—Ç–æ–≤"
    },
    "7": {
        "name": "–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ (–±–∞–∑–æ–≤—ã–µ)",
        "script": "pipeline/stage7_quality.py",
        "description": "–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞"
    },
    "7_enhanced": {
        "name": "–ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)",
        "script": "pipeline/stage7_quality_enhanced.py",
        "description": "–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º–∏"
    },
    "dashboard": {
        "name": "–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥",
        "script": "dashboard/interactive_dashboard.py",
        "description": "–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ HTML –¥–∞—à–±–æ—Ä–¥–∞"
    },
    "ab_test": {
        "name": "A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤",
        "script": "pipeline/ab_testing_prompts.py",
        "description": "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤"
    }
}

def run_stage(stage_id: str, skip_failed: bool = False) -> bool:
    """–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —ç—Ç–∞–ø–∞"""
    
    if stage_id not in ENHANCED_STAGES:
        logger.error(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ç–∞–ø: {stage_id}")
        return False
    
    stage_info = ENHANCED_STAGES[stage_id]
    script_path = Path(stage_info["script"])
    
    if not script_path.exists():
        logger.error(f"‚ùå –°–∫—Ä–∏–ø—Ç —ç—Ç–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {script_path}")
        return False
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞ {stage_id}: {stage_info['name']}")
    logger.info(f"üìù {stage_info['description']}")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥—É–ª—å
        import importlib.util
        spec = importlib.util.spec_from_file_location(f"stage_{stage_id}", script_path)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º main —Ñ—É–Ω–∫—Ü–∏—é
        if hasattr(module, 'main'):
            module.main()
            logger.info(f"‚úÖ –≠—Ç–∞–ø {stage_id} –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        else:
            logger.error(f"‚ùå –í —Å–∫—Ä–∏–ø—Ç–µ {script_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è main()")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —ç—Ç–∞–ø–µ {stage_id}: {e}")
        if not skip_failed:
            raise
        return False

def run_pipeline(stages: List[str], skip_failed: bool = False) -> Dict[str, Any]:
    """–ó–∞–ø—É—Å–∫ pipeline —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —ç—Ç–∞–ø–∞–º–∏"""
    
    logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Enhanced Pipeline —Å —ç—Ç–∞–ø–∞–º–∏: {', '.join(stages)}")
    
    results = {
        "started_at": pd.Timestamp.now().isoformat(),
        "stages": {},
        "success": True,
        "errors": []
    }
    
    for stage_id in stages:
        if stage_id not in ENHANCED_STAGES:
            error_msg = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ç–∞–ø: {stage_id}"
            logger.error(f"‚ùå {error_msg}")
            results["errors"].append(error_msg)
            if not skip_failed:
                results["success"] = False
                break
            continue
        
        stage_start = pd.Timestamp.now()
        success = run_stage(stage_id, skip_failed)
        stage_end = pd.Timestamp.now()
        
        results["stages"][stage_id] = {
            "name": ENHANCED_STAGES[stage_id]["name"],
            "success": success,
            "started_at": stage_start.isoformat(),
            "completed_at": stage_end.isoformat(),
            "duration_seconds": (stage_end - stage_start).total_seconds()
        }
        
        if not success and not skip_failed:
            results["success"] = False
            break
    
    results["completed_at"] = pd.Timestamp.now().isoformat()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results_file = "reports/pipeline_results.json"
    Path("reports").mkdir(exist_ok=True, parents=True)
    
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    logger.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã pipeline —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_file}")
    
    return results

def get_enhanced_pipeline_presets() -> Dict[str, List[str]]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π pipeline"""
    
    return {
        "basic": ["1", "2", "3", "4", "5", "6", "7"],
        "enhanced": ["1", "2_enhanced", "2.5", "3", "4_enhanced", "4.5", "5", "6", "7_enhanced", "dashboard"],
        "full": ["1", "1.5", "2_enhanced", "2.5", "3", "4_enhanced", "4.5", "5", "6", "7_enhanced", "dashboard", "ab_test"],
        "quality": ["2_enhanced", "4_enhanced", "4.5", "7_enhanced", "dashboard"],
        "ab_testing": ["ab_test"],
        "dashboard_only": ["dashboard"]
    }

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    parser = argparse.ArgumentParser(description="Enhanced Pipeline Manager –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–∞–ª–æ–≥–æ–≤")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–∏
    parser.add_argument("--stages", nargs="+", help="–°–ø–∏—Å–æ–∫ —ç—Ç–∞–ø–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
    parser.add_argument("--preset", choices=list(get_enhanced_pipeline_presets().keys()), 
                       help="–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    parser.add_argument("--from", dest="from_stage", help="–ó–∞–ø—É—Å–∫ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —ç—Ç–∞–ø–∞")
    parser.add_argument("--to", help="–ó–∞–ø—É—Å–∫ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —ç—Ç–∞–ø–∞")
    parser.add_argument("--skip-failed", action="store_true", help="–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö")
    parser.add_argument("--list-stages", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤")
    parser.add_argument("--list-presets", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    args = parser.parse_args()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —ç—Ç–∞–ø–æ–≤
    if args.list_stages:
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç—Ç–∞–ø—ã:")
        for stage_id, info in ENHANCED_STAGES.items():
            print(f"  {stage_id:8} - {info['name']}")
            print(f"           {info['description']}")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    if args.list_presets:
        print("\nüéØ –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        presets = get_enhanced_pipeline_presets()
        for preset_name, stages in presets.items():
            print(f"  {preset_name:12} - {', '.join(stages)}")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–∞–ø—ã –¥–ª—è –∑–∞–ø—É—Å–∫–∞
    stages_to_run = []
    
    if args.preset:
        presets = get_enhanced_pipeline_presets()
        stages_to_run = presets[args.preset]
        logger.info(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∞: {args.preset}")
    elif args.stages:
        stages_to_run = args.stages
    elif args.from_stage or args.to:
        all_stage_ids = list(ENHANCED_STAGES.keys())
        start_idx = all_stage_ids.index(args.from_stage) if args.from_stage else 0
        end_idx = all_stage_ids.index(args.to) + 1 if args.to else len(all_stage_ids)
        stages_to_run = all_stage_ids[start_idx:end_idx]
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—É—Å–∫–∞–µ–º enhanced pipeline
        stages_to_run = get_enhanced_pipeline_presets()["enhanced"]
        logger.info("üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: enhanced")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º pipeline
    try:
        results = run_pipeline(stages_to_run, args.skip_failed)
        
        if results["success"]:
            logger.info("üéâ Pipeline –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            logger.error("‚ùå Pipeline –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
            if results["errors"]:
                logger.error("–û—à–∏–±–∫–∏:")
                for error in results["errors"]:
                    logger.error(f"  - {error}")
    except KeyboardInterrupt:
        logger.info("‚èπÔ∏è Pipeline –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
