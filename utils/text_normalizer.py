#!/usr/bin/env python3
"""
Модуль нормализации текста
Единый препроцессор для обработки диалогов
"""

import re
from typing import List, Dict, Any, Tuple


def normalize_text(s: str) -> str:
    """
    Нормализация текста:
    - Замена ё→е
    - Приведение к нижнему регистру
    - Удаление повторных пробелов и непечатных символов
    """
    if not s:
        return ""
    
    # Замена ё→е и приведение к нижнему регистру
    s = s.replace("ё", "е").lower()
    
    # Удаление повторных пробелов и непечатных символов
    s = re.sub(r"\s+", " ", s).strip()
    
    return s


def split_turns(raw_text: str) -> List[Dict[str, str]]:
    """
    Разбор диалога на реплики с ролями
    Строго распознает "Клиент:" / "Оператор:" (иначе — skip)
    """
    if not raw_text:
        return []
    
    turns = []
    lines = raw_text.split('\n')
    
    for line in lines:
        line = line.strip()
        if not line:
            continue
            
        # Проверяем формат "Роль: текст"
        if ':' in line:
            parts = line.split(':', 1)
            if len(parts) == 2:
                speaker = parts[0].strip().lower()
                text = parts[1].strip()
                
                # Нормализуем роль
                if speaker in ['клиент', 'client']:
                    speaker = 'клиент'
                elif speaker in ['оператор', 'operator', 'менеджер', 'manager']:
                    speaker = 'оператор'
                else:
                    continue  # Пропускаем неизвестные роли
                
                if text:  # Только непустой текст
                    turns.append({
                        "speaker": speaker,
                        "text": normalize_text(text)
                    })
    
    return turns


def extract_duration(dialog: Dict[str, Any]) -> int:
    """
    Извлечение длительности звонка
    Приоритет: duration_sec из метаданных
    Иначе: эвристика по количеству токенов/реплик
    """
    # Прямое поле длительности
    if 'duration_sec' in dialog and dialog['duration_sec']:
        return int(dialog['duration_sec'])
    
    # Эвристика по тексту
    text = dialog.get('text', '')
    if not text:
        return 0
    
    # Подсчет токенов (приблизительно)
    tokens = len(text.split())
    
    # Подсчет реплик
    turns = split_turns(text)
    num_turns = len(turns)
    
    # Эвристика: если >= 400 токенов и >= 6 реплик, считаем длинным
    if tokens >= 400 and num_turns >= 6:
        return 300  # Предполагаем 5+ минут
    elif tokens >= 200 and num_turns >= 4:
        return 180  # Предполагаем 3+ минуты
    else:
        return 60   # Короткий звонок


def is_yesno_response(text: str) -> bool:
    """
    Проверка на односложные ответы (да/нет/угу)
    """
    yesno_pattern = re.compile(r"^(да|нет|угу|ага|не знаю|наверное|возможно)[.!?]?$", re.IGNORECASE)
    return bool(yesno_pattern.match(text.strip()))


def count_tokens(text: str) -> int:
    """
    Подсчет токенов в тексте
    """
    return len(text.split())


def extract_regions_from_text(text: str) -> List[str]:
    """
    Извлечение регионов из текста (если есть)
    """
    regions = []
    
    # Простые паттерны для регионов
    region_patterns = [
        r'москв\w+',
        r'санкт-петербург\w+',
        r'питер\w+',
        r'екатеринбург\w+',
        r'новосибирск\w+',
        r'нижний новгород\w+',
        r'казан\w+',
        r'челябинск\w+',
        r'омск\w+',
        r'самара\w+',
        r'ростов\w+',
        r'уфа\w+',
        r'красноярск\w+',
        r'перм\w+',
        r'волгоград\w+',
        r'воронеж\w+',
        r'саратов\w+',
        r'краснодар\w+',
        r'тольятти\w+',
        r'барнаул\w+',
        r'ижевск\w+',
        r'ульяновск\w+',
        r'владивосток\w+',
        r'ярославль\w+',
        r'хабаровск\w+',
        r'махачкала\w+',
        r'томск\w+',
        r'оренбург\w+',
        r'кемерово\w+',
        r'рязан\w+',
        r'астрахан\w+',
        r'набережные челны\w+',
        r'пенз\w+',
        r'липецк\w+',
        r'тула\w+',
        r'киров\w+',
        r'чебоксар\w+',
        r'калининград\w+',
        r'брянск\w+',
        r'курск\w+',
        r'иваново\w+',
        r'магнитогорск\w+',
        r'твер\w+',
        r'ставрополь\w+',
        r'нижний тагил\w+',
        r'белгород\w+',
        r'архангельск\w+',
        r'владимир\w+',
        r'сочи\w+',
        r'курган\w+',
        r'смоленск\w+',
        r'калуга\w+',
        r'чита\w+',
        r'орёл\w+',
        r'волжский\w+',
        r'череповец\w+',
        r'мурманск\w+',
        r'сургут\w+',
        r'вологда\w+',
        r'владикавказ\w+',
        r'саранск\w+',
        r'тамбов\w+',
        r'стерлитамак\w+',
        r'грозный\w+',
        r'якутск\w+',
        r'кострома\w+',
        r'комсомольск-на-амуре\w+',
        r'петрозаводск\w+',
        r'таганрог\w+',
        r'нижневартовск\w+',
        r'йошкар-ола\w+',
        r'братск\w+',
        r'новокузнецк\w+',
        r'шахты\w+',
        r'нальчик\w+',
        r'сыктывкар\w+',
        r'нижнекамск\w+',
        r'орск\w+',
        r'ангарск\w+',
        r'благовещенск\w+',
        r'прокопьевск\w+',
        r'химки\w+',
        r'псков\w+',
        r'бийск\w+',
        r'энгельс\w+',
        r'рыбинск\w+',
        r'балашиха\w+',
        r'северодвинск\w+',
        r'подольск\w+',
        r'королёв\w+',
        r'сызрань\w+',
        r'норильск\w+',
        r'златоуст\w+',
        r'петропавловск-камчатский\w+',
        r'каменск-уральский\w+',
        r'электросталь\w+',
        r'абакан\w+',
        r'мичуринск\w+',
        r'новочеркасск\w+',
        r'железнодорожный\w+',
        r'пятигорск\w+',
        r'коломна\w+',
        r'майкоп\w+',
        r'назрань\w+',
        r'кызыл\w+',
        r'элиста\w+',
        r'горно-алтайск\w+',
        r'анадырь\w+',
        r'южно-сахалинск\w+',
        r'магадан\w+',
        r'салехард\w+',
        r'нарьян-мар\w+',
        r'дудинка\w+',
        r'хабаровск\w+',
        r'владивосток\w+',
        r'благовещенск\w+',
        r'петропавловск-камчатский\w+',
        r'южно-сахалинск\w+',
        r'магадан\w+',
        r'анадырь\w+',
        r'салехард\w+',
        r'нарьян-мар\w+',
        r'дудинка\w+',
        r'кызыл\w+',
        r'элиста\w+',
        r'горно-алтайск\w+',
        r'майкоп\w+',
        r'назрань\w+',
        r'абакан\w+',
        r'мичуринск\w+',
        r'новочеркасск\w+',
        r'железнодорожный\w+',
        r'пятигорск\w+',
        r'коломна\w+',
        r'златоуст\w+',
        r'каменск-уральский\w+',
        r'электросталь\w+',
        r'норильск\w+',
        r'сызрань\w+',
        r'королёв\w+',
        r'подольск\w+',
        r'северодвинск\w+',
        r'балашиха\w+',
        r'рыбинск\w+',
        r'энгельс\w+',
        r'бийск\w+',
        r'псков\w+',
        r'химки\w+',
        r'прокопьевск\w+',
        r'ангарск\w+',
        r'орск\w+',
        r'нижнекамск\w+',
        r'сыктывкар\w+',
        r'нальчик\w+',
        r'шахты\w+',
        r'новокузнецк\w+',
        r'братск\w+',
        r'йошкар-ола\w+',
        r'нижневартовск\w+',
        r'таганрог\w+',
        r'петрозаводск\w+',
        r'комсомольск-на-амуре\w+',
        r'кострома\w+',
        r'якутск\w+',
        r'грозный\w+',
        r'стерлитамак\w+',
        r'тамбов\w+',
        r'саранск\w+',
        r'владикавказ\w+',
        r'вологда\w+',
        r'сургут\w+',
        r'мурманск\w+',
        r'череповец\w+',
        r'волжский\w+',
        r'орёл\w+',
        r'чита\w+',
        r'калуга\w+',
        r'смоленск\w+',
        r'курган\w+',
        r'сочи\w+',
        r'владимир\w+',
        r'архангельск\w+',
        r'белгород\w+',
        r'нижний тагил\w+',
        r'ставрополь\w+',
        r'твер\w+',
        r'магнитогорск\w+',
        r'иваново\w+',
        r'курск\w+',
        r'брянск\w+',
        r'калининград\w+',
        r'чебоксар\w+',
        r'киров\w+',
        r'тула\w+',
        r'липецк\w+',
        r'пенз\w+',
        r'набережные челны\w+',
        r'астрахан\w+',
        r'рязан\w+',
        r'кемерово\w+',
        r'оренбург\w+',
        r'томск\w+',
        r'махачкала\w+',
        r'хабаровск\w+',
        r'ярославль\w+',
        r'владивосток\w+',
        r'ульяновск\w+',
        r'ижевск\w+',
        r'барнаул\w+',
        r'тольятти\w+',
        r'краснодар\w+',
        r'саратов\w+',
        r'воронеж\w+',
        r'волгоград\w+',
        r'перм\w+',
        r'красноярск\w+',
        r'уфа\w+',
        r'ростов\w+',
        r'самара\w+',
        r'омск\w+',
        r'челябинск\w+',
        r'казан\w+',
        r'нижний новгород\w+',
        r'новосибирск\w+',
        r'екатеринбург\w+',
        r'питер\w+',
        r'санкт-петербург\w+',
        r'москв\w+'
    ]
    
    text_lower = text.lower()
    for pattern in region_patterns:
        if re.search(pattern, text_lower):
            regions.append(re.search(pattern, text_lower).group(0))
    
    return list(set(regions))  # Убираем дубликаты
